import DeformationPaths:    Framework,
                            AngularFramework,
                            DeformationPath,
                            Polytope,
                            animate, 
                            VolumeHypergraph,
                            SpherePacking,
                            plot,
                            SphericalDiskPacking,
                            to_Array,
                            equations!,
                            to_Matrix,
                            newton_correct,
                            realization!,
                            project_deformation_random,
                            FrameworkOnSurface,
                            is_rigid,
                            is_inf_rigid,
                            BodyHinge
using Test
using HomotopyContinuation
using LinearAlgebra


@testset "bodyhinge" begin
    F = BodyHinge([[1,2,3,4],[3,4,5,6]], Matrix([0 0 0; 1 0 0; 1 1 0; 0 1 0; 0 1 1; 1 1 1]'))
    plot(F,"bodyhinge")
    D = DeformationPath(F, [], 200; step_size=0.025)
    animate(D,F,"bodyhinge_motion"; filetype="mp4")
end


@testset "is_rigid_test" begin
    F = Framework([[1,2],[2,3],[3,4],[1,4],[1,5],[3,5],[4,5]], Matrix([0. 0; 1 0; 2 0; 1 1; 1 2]'))
    @test !is_inf_rigid(F)
    @test is_rigid(F)
end


@testset "square" begin
    F = Framework([[1,2],[2,3],[3,4],[1,4]], Matrix([0. 0; 1 0; 1 1; 0 1]'))
    plot(F,"square")
    D = DeformationPath(F, [1], 200; step_size=0.025)
    animate(D,F,"square_motion"; filetype="mp4")
end


@testset "prestress_stable_component" begin
    F = Framework([[1,2],[2,3],[3,4],[1,4],[1,5],[3,5],[4,5],[1,6]], Matrix([0. 0; 1 0; 2 0; 1 1; 1 2; 0 -1]'))
    plot(F,"prestress_stable_component")
    D = DeformationPath(F, [1,1], 200; step_size=0.025)
    animate(D,F,"prestress_stable_component_motion"; filetype="mp4")
end


@testset "K_4" begin
    F = Framework([[1,2],[2,3],[3,4],[1,4],[2,4],[1,3],[1,5]], Matrix([0. 0; 1 0; 1 1; 0 1; 0 -1]'))
    plot(F,"K_4")
    D = DeformationPath(F, [1], 200; step_size=0.025)
    animate(D,F,"K_4_motion")
end


@testset "twoprism" begin
    F = Framework([[1,2],[2,3],[3,1],[1,4],[2,5],[3,6],[4,5],[5,6],[6,4]], Matrix([0 0; 2 0; 1 1; 0 2; 2 2; 1 3]'))
    plot(F,"twoprism")
    D = DeformationPath(F, [1], 220; step_size=0.025)
    animate(D,F,"twoprism_motion")
end


@testset "completebipartite" begin
    F = Framework([[1,3],[1,4],[1,5],[1,6],[2,3],[2,4],[2,5],[2,6]], Matrix([0 0; 0 1; 1 -1; 1 0; 1 1; 1 2]'))
    plot(F,"completebipartite")
    D = DeformationPath(F, [1], 500; step_size=0.025)
    animate(D,F,"completebipartite_motion"; filetype="mp4")
end


@testset "coned_cube" begin
    F = Framework(vcat([[1,2],[2,3],[3,4],[1,4],[1,5],[2,6],[3,7],[4,8],[5,6],[6,7],[7,8],[5,8]],[[i,9] for i in 1:8]), Matrix([-1 -1 -1; 1 -1 -1; 1 1 -1; -1 1 -1; -1 -1 1; 1 -1 1; 1 1 1; -1 1 1; 0 0 sqrt(2)]'))
    plot(F,"coned_cube")
    D = DeformationPath(F, [0.5,0.5], 500; step_size=0.02)
    animate(D,F,"coned_cube_motion"; filetype="mp4")
end


@testset "double_watt" begin
    F = Framework([[1,2],[2,3],[2,4],[3,9],[3,4],[3,5],[4,5],[5,6],[6,7],[7,8],[7,9],[8,9],[8,10],[9,10],[10,11]], Matrix([0 0; 1 0; 2 1; 1 2; 3 2; 4 2; 5 2; 7 2; 6 1; 7 0; 8 0;]'); pinned_vertices=[1,6,11])
    plot(F,"double_watt"; padding=0.35, pin_point_offset=0.2)
    D = DeformationPath(F, [0.5,0.5], 500; step_size=0.05)
    animate(D,F,"double_watt_motion"; padding=0.35, fixed_vertices=(1,6), fixed_direction=[4,2], pin_point_offset=0.2, filetype="mp4")
end


@testset "thales" begin
    F = AngularFramework([[1,3,2]], Matrix([-1 0; 1 0; -sqrt(1/2) sqrt(1/2);]'); pinned_vertices=[1,2])
    plot(F,"thales"; padding=0.1, pin_point_offset=0.075)
    D = DeformationPath(F, [1], 250; step_size=0.025)
    animate(D,F,"thales_motion"; padding=0.075, pin_point_offset=0.075, filetype="mp4")
end


@testset "squareonhyperboloid" begin
    F = FrameworkOnSurface([[1,2],[2,3],[3,4],[1,4]], Matrix([-sqrt(1/2) -sqrt(1/2) -1; -1 0 0; 0 1 0; sqrt(1/2) sqrt(1/2) 1]'), x->x[1]^2+x[2]^2-x[3]^2-1)
    plot(F,"squareonhyperboloid")
    D = DeformationPath(F, [1,1], 350; step_size=0.035)
    animate(D,F,"squareonhyperboloid_motion"; animate_rotation=true, filetype="mp4")
end


@testset "sphericaldiskpacking" begin
    F = SphericalDiskPacking([(1,2),(1,3),(1,4),(1,5),(2,3),(2,4),(3,5),(4,5),(2,6),(3,6),(4,6),(5,6)], Matrix([sqrt(2) 0 0; 0 sqrt(2) 0; 0 0 sqrt(2); 0 -sqrt(2) 0; 0 0 -sqrt(2); -sqrt(2) 0 0]'); pinned_vertices=[1])
    plot(F,"sphericaldiskpacking")
    D = DeformationPath(F, [1], 250; step_size=0.01)
    animate(D,F,"sphericaldiskpacking_motion"; filetype="mp4")
end


@testset "diskpacking" begin
    F = SpherePacking([1.,1.,1.,1.,1.], Matrix([0 0; 2 0; 3 sqrt(3); 4 0; 6 0]'); pinned_vertices=[1,5])
    plot(F,"diskpacking")
    F = SpherePacking([1.,1.,1.,1.], Matrix([0 0; 1.75 -sqrt(2^2-(1.75)^2); 3.5 0; 4.5 sqrt(3)]'); pinned_vertices=[1])
    D = DeformationPath(F, [1,1], 250; step_size=0.025)
    animate(D,F,"diskpacking_motion"; filetype="mp4")
end


@testset "squarediskpacking" begin
    F = SpherePacking([1.,1.,1.,1.], Matrix([0 0; 2 0; 0 2; 2 2]'); pinned_vertices=[1])
    plot(F,"squarediskpacking")
    D = DeformationPath(F, [1], 250; step_size=0.01)
    animate(D,F,"squarediskpacking_motion"; filetype="mp4")
end


@testset "spherepacking" begin
    F = SpherePacking([1.,1.,1.,1.], Matrix([0 0 0; 2 0 0; 0 2 0; 0 0 2]'), pinned_vertices = [1,2])
    plot(F,"spherepacking")
    D = DeformationPath(F, [1,1,1], 500; step_size=0.04)
    animate(D,F,"spherepacking_motion"; filetype="mp4")
end


@testset "cube" begin
    F = Polytope([[1,2,3,4],[5,6,7,8],[1,2,5,6],[2,3,6,7],[3,4,7,8],[1,4,5,8]], Matrix([-1 -1 -1; 1 -1 -1; 1 1 -1; -1 1 -1; -1 -1 1; 1 -1 1; 1 1 1; -1 1 1]'))
    plot(F,"cube")
    D = DeformationPath(F, [1,1,1], 100; step_size=0.025)
    animate(D,F,"cube_motion"; filetype="mp4")
end


@testset "cuboctahedron" begin
    F = Polytope([[1,5,9],[1,5,3,7],[1,7,11],[1,9,2,11],[2,9,6],[2,11,8],[3,5,10],[3,7,12],[3,10,4,12],[4,10,6],[4,12,8],[6,4,8,2],[5,9,6,10],[7,11,8,12]], Matrix([1 1 0; -1 1 0; 1 -1 0; -1 -1 0; 1 0 1; -1 0 1; 1 0 -1; -1 0 -1; 0 1 1; 0 -1 1; 0 1 -1; 0 -1 -1;]'))
    plot(F,"cuboctahedron")
    D = DeformationPath(F, [], 200; step_size=0.01, newton_tol=1e-2)
    animate(D,F,"cuboctahedron_motion"; filetype="mp4")
end


@testset "truncatedOctahedron" begin
    F = Polytope([[17,11,9,15],[14,8,10,16],[22,24,21,18],[12,5,2,6],[13,19,23,20],[4,1,3,7],[19,13,7,3,8,14],[15,9,4,7,13,20],[16,10,5,12,18,21],[22,18,12,6,11,17],[20,23,24,22,17,15],[14,16,21,24,23,19],[9,11,6,2,1,4],[3,1,2,5,10,8]], Matrix([-1.5000000000000 -0.50000000000000 0; -1.5000000000000 0.50000000000000 0; -1.0000000000000 -1.0000000000000 -0.70710678118655; -1.0000000000000 -1.0000000000000 0.70710678118655; -1.0000000000000 1.0000000000000 -0.70710678118655; -1.0000000000000 1.0000000000000 0.70710678118655; -0.50000000000000 -1.5000000000000 0; -0.50000000000000 -0.50000000000000 -1.4142135623731; -0.50000000000000 -0.50000000000000 1.4142135623731; -0.50000000000000 0.50000000000000 -1.4142135623731; -0.50000000000000 0.50000000000000 1.4142135623731; -0.50000000000000 1.5000000000000 0; 0.50000000000000 -1.5000000000000 0; 0.50000000000000 -0.50000000000000 -1.4142135623731; 0.50000000000000 -0.50000000000000 1.4142135623731; 0.50000000000000 0.50000000000000 -1.4142135623731; 0.50000000000000 0.50000000000000 1.4142135623731; 0.50000000000000 1.5000000000000 0; 1.0000000000000 -1.0000000000000 -0.70710678118655; 1.0000000000000 -1.0000000000000 0.70710678118655; 1.0000000000000 1.0000000000000 -0.70710678118655; 1.000000000000 1.0000000000000 0.70710678118655; 1.5000000000000 -0.50000000000000 0; 1.5000000000000 0.50000000000000 0]'))    
    for i in 1:5
        plot(F,"truncatedOctahedron_flex=$(i)"; padding=0.35, plot_flexes=true, flex_number=i)
    end
    @test !is_inf_rigid(F)
    @test !is_rigid(F; newton_tol=1e-10)
    D = DeformationPath(F, [], 200; step_size=0.01, newton_tol=1e-2)
    animate(D,F,"truncatedOctahedron_motion"; filetype="mp4")
end


@testset "truncatedCube" begin
    F = Polytope([(6,12,10,8,4,18,20,2),(1,19,17,3,7,9,11,5),(3,24,23,4,8,15,16,7),(5,14,13,6,2,21,22,1),(9,16,15,10,12,13,14,11),(19,22,21,20,18,23,24,17),(16,9,7),(5,11,14),(3,17,24),(22,19,1),(8,10,15),(13,12,6),(23,18,4),(2,20,21)], Matrix([-0.5000000000000000 1.207106781186548 1.207106781186548; -0.5000000000000000 1.207106781186548 -1.207106781186548; -0.5000000000000000 -1.207106781186548 1.207106781186548; -0.5000000000000000 -1.207106781186548 -1.207106781186548; 0.5000000000000000 1.207106781186548 1.207106781186548; 0.5000000000000000 1.207106781186548 -1.207106781186548; 0.5000000000000000 -1.207106781186548 1.207106781186548; 0.5000000000000000 -1.207106781186548 -1.207106781186548; 1.207106781186548 -0.5000000000000000 1.207106781186548; 1.207106781186548 -0.5000000000000000 -1.207106781186548; 1.207106781186548 0.5000000000000000 1.207106781186548; 1.207106781186548 0.5000000000000000 -1.207106781186548; 1.207106781186548 1.207106781186548 -0.5000000000000000; 1.207106781186548 1.207106781186548 0.5000000000000000; 1.207106781186548 -1.207106781186548 -0.5000000000000000; 1.207106781186548 -1.207106781186548 0.5000000000000000; -1.207106781186548 -0.5000000000000000 1.207106781186548; -1.207106781186548 -0.5000000000000000 -1.207106781186548; -1.207106781186548 0.5000000000000000 1.207106781186548; -1.207106781186548 0.5000000000000000 -1.207106781186548; -1.207106781186548 1.207106781186548 -0.5000000000000000; -1.207106781186548 1.207106781186548 0.5000000000000000; -1.207106781186548 -1.207106781186548 -0.5000000000000000; -1.207106781186548 -1.207106781186548 0.5000000000000000]'))    
    plot(F,"truncatedCube")
    @test is_inf_rigid(F)
    @test is_rigid(F)
end


@testset "truncatedTetrahedron" begin
    F = Polytope([(11,12,8),(3,9,1),(2,10,4),(6,5,7),(11,8,7,5,3,1),(2,4,6,7,8,12),(9,3,5,6,4,10),(2,12,11,1,9,10)], Matrix([0 -1.000000000000000 -0.6123724356957945; 0 1.000000000000000 -0.6123724356957945; -0.5773502691896258 -1.000000000000000 0.2041241452319315; -0.5773502691896258 1.000000000000000 0.2041241452319315; -0.2886751345948129 -0.5000000000000000 1.020620726159658; -0.2886751345948129 0.5000000000000000 1.020620726159658; 0.5773502691896258 0 1.020620726159658; 1.154700538379252 0 0.2041241452319315; -0.8660254037844386 -0.5000000000000000 -0.6123724356957945; -0.8660254037844386 0.5000000000000000 -0.6123724356957945; 0.8660254037844386 -0.5000000000000000 -0.6123724356957945; 0.8660254037844386 0.5000000000000000 -0.6123724356957945]'))    
    plot(F,"truncatedTetrahedron")
    @test is_inf_rigid(F)
    @test is_rigid(F)
end


@testset "rhombiCuboctahedron" begin
    F = Polytope([(3,11,9,1),(2,10,12,4),(24,22,21,23),(19,17,18,20),(5,13,14,6),(8,16,15,7),(13,21,22,14),(16,24,23,15),(6,18,17,5),(7,19,20,8),(6,14,10,2),(4,12,16,8),(22,24,12,10),(2,4,20,18),(1,9,13,5),(7,15,11,3),(9,11,23,21),(17,19,3,1),(22,10,14),(16,12,24),(6,2,18),(20,4,8),(13,9,21),(23,11,15),(17,1,5),(7,3,19)], Matrix([-0.50000000000000 -0.50000000000000 -1.2071067811865; -0.50000000000000 -0.50000000000000 1.2071067811865; -0.50000000000000 0.50000000000000 -1.2071067811865; -0.50000000000000 0.50000000000000 1.2071067811865; -0.50000000000000 -1.2071067811865 -0.50000000000000; -0.50000000000000 -1.2071067811865 0.50000000000000; -0.50000000000000 1.2071067811865 -0.50000000000000; -0.50000000000000 1.2071067811865 0.50000000000000; 0.50000000000000 -0.50000000000000 -1.2071067811865; 0.50000000000000 -0.50000000000000 1.2071067811865; 0.50000000000000 0.50000000000000 -1.2071067811865; 0.50000000000000 0.50000000000000 1.2071067811865; 0.50000000000000 -1.2071067811865 -0.50000000000000; 0.50000000000000 -1.2071067811865 0.50000000000000; 0.50000000000000 1.2071067811865 -0.50000000000000; 0.50000000000000 1.2071067811865 0.50000000000000; -1.2071067811865 -0.50000000000000 -0.50000000000000; -1.2071067811865 -0.50000000000000 0.50000000000000; -1.2071067811865 0.50000000000000 -0.50000000000000; -1.2071067811865 0.50000000000000 0.50000000000000; 1.2071067811865 -0.50000000000000 -0.50000000000000; 1.2071067811865 -0.50000000000000 0.50000000000000; 1.2071067811865 0.50000000000000 -0.50000000000000; 1.2071067811865 0.50000000000000 0.50000000000000]'))    
    plot(F,"rhombiCuboctahedron")
    @test !is_inf_rigid(F)
    @test is_rigid(F)
end


@testset "greatrhombiCuboctahedron" begin
    F = Polytope([ (44,42,17,19), (14,6,3,11), (34,36,27,25), (8,16,9,1), (20,18,41,43), (12,4,5,13), (26,28,35,33), (2,10,15,7), (45,23,24,46), (39,29,30,40), (48,22,21,47), (38,32,31,37), (9,19,17,11,3,25,27,1), (2,28,26,4,12,18,20,10), (41,48,47,42,44,45,46,43), (35,38,37,36,34,39,40,33), (15,24,23,16,8,31,32,7), (5,30,29,6,14,21,22,13), (46,24,15,10,20,43), (35,28,2,7,32,38), (41,18,12,13,22,48), (40,30,5,4,26,33), (44,19,9,16,23,45), (37,31,8,1,27,36), (47,21,14,11,17,42), (34,25,3,6,29,39)], Matrix([-0.50000000000000 1.2071067811865 -1.9142135623731 ;-0.50000000000000 1.2071067811865 1.9142135623731 ;-0.50000000000000 -1.2071067811865 -1.9142135623731 ;-0.50000000000000 -1.2071067811865 1.9142135623731 ;-0.50000000000000 -1.9142135623731 1.2071067811865 ;-0.50000000000000 -1.9142135623731 -1.2071067811865 ;-0.50000000000000 1.9142135623731 1.2071067811865 ;-0.50000000000000 1.9142135623731 -1.2071067811865 ;0.50000000000000 1.2071067811865 -1.9142135623731 ;0.50000000000000 1.2071067811865 1.9142135623731 ;0.50000000000000 -1.2071067811865 -1.9142135623731 ;0.50000000000000 -1.2071067811865 1.9142135623731 ;0.50000000000000 -1.9142135623731 1.2071067811865 ;0.50000000000000 -1.9142135623731 -1.2071067811865 ;0.50000000000000 1.9142135623731 1.2071067811865 ;0.50000000000000 1.9142135623731 -1.2071067811865 ;1.2071067811865 -0.50000000000000 -1.9142135623731 ;1.2071067811865 -0.50000000000000 1.9142135623731 ;1.2071067811865 0.50000000000000 -1.9142135623731 ;1.2071067811865 0.50000000000000 1.9142135623731 ;1.2071067811865 -1.9142135623731 -0.50000000000000 ;1.2071067811865 -1.9142135623731 0.50000000000000 ;1.2071067811865 1.9142135623731 -0.50000000000000 ;1.2071067811865 1.9142135623731 0.50000000000000 ;-1.2071067811865 -0.50000000000000 -1.9142135623731 ;-1.2071067811865 -0.50000000000000 1.9142135623731 ;-1.2071067811865 0.50000000000000 -1.9142135623731 ;-1.2071067811865 0.50000000000000 1.9142135623731 ;-1.2071067811865 -1.9142135623731 -0.50000000000000 ;-1.2071067811865 -1.9142135623731 0.50000000000000 ;-1.2071067811865 1.9142135623731 -0.50000000000000 ;-1.2071067811865 1.9142135623731 0.50000000000000 ;-1.9142135623731 -0.50000000000000 1.2071067811865 ;-1.9142135623731 -0.50000000000000 -1.2071067811865 ;-1.9142135623731 0.50000000000000 1.2071067811865 ;-1.9142135623731 0.50000000000000 -1.2071067811865 ;-1.9142135623731 1.2071067811865 -0.50000000000000 ;-1.9142135623731 1.2071067811865 0.50000000000000 ;-1.9142135623731 -1.2071067811865 -0.50000000000000 ;-1.9142135623731 -1.2071067811865 0.50000000000000 ;1.9142135623731 -0.50000000000000 1.2071067811865 ;1.9142135623731 -0.50000000000000 -1.2071067811865 ;1.9142135623731 0.50000000000000 1.2071067811865 ;1.9142135623731 0.50000000000000 -1.2071067811865 ;1.9142135623731 1.2071067811865 -0.50000000000000 ;1.9142135623731 1.2071067811865 0.50000000000000 ;1.9142135623731 -1.2071067811865 -0.50000000000000 ;1.9142135623731 -1.2071067811865 0.50000000000000]'))    
    plot(F,"greatrhombiCuboctahedron")
    @test !is_inf_rigid(F)
    @test is_rigid(F)
end


@testset "two_triangles" begin
    F = VolumeHypergraph([[1,2,3],[2,3,4]], Matrix([0 0; 1 0; 0 1; 1 1]'))
    plot(F,"two_triangles")
    D = DeformationPath(F, [1], 100; step_size=0.01)
    animate(D, F,"two_triangles_motion"; fixed_triangle=(1,2,3),tip_value=0,skip_stretch=false, filetype="mp4")
end


@testset "two_triangles" begin
    F = VolumeHypergraph([[1,2,3],[2,3,4]], Matrix([0 0; 1 0; 0 1; 1 1]'))
    plot(F,"two_triangles")
    D = DeformationPath(F, [1], 100; step_size=0.01)
    animate(D, F,"two_triangles_motion"; fixed_triangle=(1,2,3),tip_value=0,skip_stretch=false, filetype="mp4")
end


@testset "octehedral_decomposition" begin
    F = VolumeHypergraph([[1,3,6],[1,2,5],[2,3,4],[1,5,6],[6,4,5]], Matrix([0 0; 3 0; 0 3; 1 1; 1 0.5; 0.5 1]'))
    plot(F,"octahedral_decomposition")
    D = DeformationPath(F, [0.333, 1], 350; step_size=0.002)
    animate(D, F,"octahedral_decomposition_motion"; fixed_triangle=(6,4,5), skip_stretch=true, target_stretch=0.5, tip_value=0.5, filetype="mp4")
end


@testset "volume_tetrahedron" begin
    p = rand(Float64,4,3)
    p[1,:] = [0,0,0]
    p[2,2:3] = [0,0]
    p[3,3] = 0 
    F = Framework([[1,2], [1,3], [1,4], [2,4],[2,3], [3,4]], Matrix(p'))
    triangles = [(1,2,3),(1,2,4),(1,3,4),(2,3,4)]
    area_equations = Vector(Expression)([])
    for (i,triang) in enumerate(triangles)
        parallelogram_area = sum(cross(F.G.xs[:,triang[2]]-F.G.xs[:,triang[1]], F.G.xs[:,triang[3]]-F.G.xs[:,triang[1]]).^2)
        push!(area_equations, 1/4*parallelogram_area)
    end

    volume_constraint = 1/6*det(hcat([1 for _ in 1:4], F.G.xs[1,:], F.G.xs[2,:], F.G.xs[3,:]))
    push!(area_equations, volume_constraint)
    area_equations = area_equations .- evaluate.(area_equations, F.G.variables=>vcat([p[i,:] for i in 1:size(p)[1]]...))
    equations!(F, area_equations)
    point = newton_correct(F.G, to_Array(F, F.G.realization))
    realization!(F.G, to_Matrix(F, point))
    D = DeformationPath(F, [1], 500; step_size=0.01, newton_tol=1e-15)
    animate(D,F,"volume_tetrahedron"; padding=0.05, fixed_vertices=(1,2,3), animate_rotation=false, rotation_frames=1500, fixed_direction=[1,0,0], filetype="mp4")
    project_deformation_random(D, 3)
end